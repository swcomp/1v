<?xml version="1.0" encoding="utf-8" ?>
<configuration>
   <!-- ========================================================================================= -->
   <!-- GENERATED FILE - PLEASE DO NOT EDIT... -->
   <!-- ========================================================================================= -->
   <!-- This file will be generated by the 1v Control GUI Application... -->
   <!-- ========================================================================================= -->
   <!-- Instead use the 1vCP GUI application or 1v shell utility to add products and their files to 1v which will update this file. -->
   <!-- These utilities will parse VS solution files to get a list of working directories and reparse on each build to check for changes.
  non-solution files such as SQL Source Code files that need version numbers will be added as custom files either with 1vCP using a file browser dialog or
  with 1v command line by passing the file path to > 1v /addfile {path} -->
   <!-- ========================================================================================= -->
   <!-- Although each product can only have one repo, there can be multiple sub-products in the repo each of which can inherit the parent product version number ( eg for major release builds )
  or have their own product version number for certain releases, eg an API sub-product that has several new versions released while the parent product remains at the same version. -->
   <!-- This file is used by 1v to parse product repository working directories and add all C# and VB .~NET project files to 1v by inserting a 
       1v {PRODUCT NAME} "$(MSBuildProjectDirectory)" $(MSBuildProjectExtension) command each project file's prebuild event action. 
       Any non-project files to have version numbers injected will need to have a regex expression defined to ensure the version number can be inserted 
       and updated by 1v. -->

   <!-- All C# and VB .NET project files will automatically run the 1v shell utility from MS Build preBuild event and pass in their project path.
      The path will be validated against the following repos collection before the project's AssemblyInfo file is updated. Any custom non-project files
      that are listed here for each repo will also have their version updated if approporiate for the current MSBuild operation ( normally custom files will
      only have their version number updated by the build server or an SVN hook if changes to the file are committed.) -->
   <products>
      <product name="TestWebApp">
         <!-- productVersionRootFile is the file that holds the product version numbers that are automatically updated and can be manually 
     ( or from 1vCP ) updated to trigger a release build in 1v\CI_Config folder for all managed products. -->
         <!-- TODO: Add in user definable version root directory location -->
         <productVersionRootFile path="D:\_git\gh-pu\1v\CI_Tools\CI_Config\ProductVersionNumbering\TestWebApp\TestWebAppVersionNumberRoot.xml"/>
         <!-- Each product can have only one solution file, additional solution files need to be treated as sub-products -->
         <!-- The solution file is used to locate all the project files for insertion of the Pre-Build Event 1v calls to update
         the version numbers in AssemblyInfo{.cs/.vb}. -->
         <productSolutionFile path="D:\_git\gh-pu\1v\1v_Test\TestWebApp/sln"/>
         <!-- Add a patch node here to trigger a patch build. -->
         <patch revision="12345">
            <!-- List the projects to be included in the patch, version numbers will include the patch revision number. -->
            <projects>
               <project name="project1"/>
               <project name="project2"/>
               <project name="project3"/>
            </projects>
         </patch>
         <!-- repo url for some CI Build tasks -->
         <repo name="TestWebApp" url="">
            <!-- Add workingDir node for customFile version number management. -->
            <workingDir path="D:\_git\gh-pu\1v\1v_Test\">                  
               <customFiles>
                  <customFile type="dbVersion" path="~\Database\Redgate\Data\dbo.tblVersion_Data.sql" regex="\(N'.*\..*\..*\..*'\)" />
               </customFiles>            
               <!-- Mulitple solutions in a repo's working directory are treated as sub products of the chosen main product. -->
               <subProducts>
                  <subProduct type="plugin" name="TestWebApp.subProduct1">
                  <productVersionRootFile path="~\1vTestProduct1\TestWebAppVersionNumberRoot.xml"/>
                  <productSolutionFile path=""/>
                  <customFiles>
                     <customFile type="appConfigFile" path="~\{...}" regex="\(N'.*\..*\..*\..*'\)" />
                  </customFiles>
               </subProduct>
               <subProduct type="utility" name="TestWebApp.subProduct2">
                  <productVersionRootFile path="~\1vTestProduct1\TestWebAppVersionNumberRoot.xml"/>
                  <productSolutionFile path=""/>
                  <customFiles>
                     <customFile type="appConfigFile" path="~\{...}" regex="\(N'.*\..*\..*\..*'\)" />
                  </customFiles>
               </subProduct>
            </subProducts>
            </workingDir>
         </repo>
      </product>
      <product name="prod2">
         <productVersionRootFile path="{file path}"/>
         <productSolutionFile path="D:\_git\gh-pu\1v\1v_Test\TestWebApp/sln"/>
         <!-- Add a patch node here to trigger a patch build. -->
         <patch revision="12345">
            <!-- List the projects to be included in the patch, version numbers will include the patch revision number. -->
            <projects>
               <project name="project1"/>
               <project name="project2"/>
               <project name="project3"/>
            </projects>
         </patch>
         <!-- Multiple repos are supported for a single product ( or sub-product ), however each repo will need to contain one or more 
         sub-products as solution files must only include projects from their own repo ( best practice and to reduce build server SVN 
         commit complexity )  -->
         <repos>
            <repo type="main" name="prod2main">
               <workingDir path="{file path}">
                  <customFiles>
                  </customFiles>
                  <!-- Mulitple solutions in a repo's working directory are treated as sub products of the chosen main product. -->
                  <subProduct type="utility" name="prod2.subProduct1">
                     <productVersionRootFile path="~\{...}"/>
                     <productSolutionFile path=""/>
                     <customFiles>
                        <customFile type="appConfigFile" path="~\{...}" regex="\(N'.*\..*\..*\..*'\)" />
                     </customFiles>
                  </subProduct>
               </workingDir>
            </repo>
            <!-- sub repos without .NET code are also supported, eg database source, configuration, design assets... 
            In this case the main product version number would be used. -->
            <repo type="services" name="prod2services">
               <workingDir path="{file path}">
                  <customFiles>
                     <customFile type="dbCatalog" path="~\{...}" regex="\(N'.*\..*\..*\..*'\)" />
                     <customFile type="designCatalog" path="~\{...}" regex="\(N'.*\..*\..*\..*'\)" />
                     <customFile type="userConfigFileList" path="~\{...}" regex="\(N'.*\..*\..*\..*'\)" />                     
                  </customFiles>
               </workingDir>
            </repo>
         </repos>
      </product>
   </products>
</configuration>
